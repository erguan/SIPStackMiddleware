/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.doubango.tinyWRAP {

using System;
using System.Runtime.InteropServices;

public class T140Callback : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal T140Callback(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(T140Callback obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~T140Callback() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          tinyWRAPPINVOKE.delete_T140Callback(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public T140Callback() : this(tinyWRAPPINVOKE.new_T140Callback(), true) {
    SwigDirectorConnect();
  }

  public virtual int ondata(T140CallbackData pData) {
    int ret = (SwigDerivedClassHasMethod("ondata", swigMethodTypes0) ? tinyWRAPPINVOKE.T140Callback_ondataSwigExplicitT140Callback(swigCPtr, T140CallbackData.getCPtr(pData)) : tinyWRAPPINVOKE.T140Callback_ondata(swigCPtr, T140CallbackData.getCPtr(pData)));
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("ondata", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateT140Callback_0(SwigDirectorondata);
    tinyWRAPPINVOKE.T140Callback_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(T140Callback));
    return hasDerivedMethod;
  }

  private int SwigDirectorondata(IntPtr pData) {
    return ondata((pData == IntPtr.Zero) ? null : new T140CallbackData(pData, false));
  }

  public delegate int SwigDelegateT140Callback_0(IntPtr pData);

  private SwigDelegateT140Callback_0 swigDelegate0;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(T140CallbackData) };
}

}
