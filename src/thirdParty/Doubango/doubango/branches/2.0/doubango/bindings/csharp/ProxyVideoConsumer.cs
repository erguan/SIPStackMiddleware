/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.doubango.tinyWRAP {

using System;
using System.Runtime.InteropServices;

public class ProxyVideoConsumer : ProxyPlugin {
  private HandleRef swigCPtr;

  internal ProxyVideoConsumer(IntPtr cPtr, bool cMemoryOwn) : base(tinyWRAPPINVOKE.ProxyVideoConsumer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ProxyVideoConsumer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProxyVideoConsumer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          tinyWRAPPINVOKE.delete_ProxyVideoConsumer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public bool setDisplaySize(uint nWidth, uint nHeight) {
    bool ret = tinyWRAPPINVOKE.ProxyVideoConsumer_setDisplaySize(swigCPtr, nWidth, nHeight);
    return ret;
  }

  public uint getDisplayWidth() {
    uint ret = tinyWRAPPINVOKE.ProxyVideoConsumer_getDisplayWidth(swigCPtr);
    return ret;
  }

  public uint getDisplayHeight() {
    uint ret = tinyWRAPPINVOKE.ProxyVideoConsumer_getDisplayHeight(swigCPtr);
    return ret;
  }

  public uint getDecodedWidth() {
    uint ret = tinyWRAPPINVOKE.ProxyVideoConsumer_getDecodedWidth(swigCPtr);
    return ret;
  }

  public uint getDecodedHeight() {
    uint ret = tinyWRAPPINVOKE.ProxyVideoConsumer_getDecodedHeight(swigCPtr);
    return ret;
  }

  public void setCallback(ProxyVideoConsumerCallback pCallback) {
    tinyWRAPPINVOKE.ProxyVideoConsumer_setCallback(swigCPtr, ProxyVideoConsumerCallback.getCPtr(pCallback));
  }

  public bool setAutoResizeDisplay(bool bAutoResizeDisplay) {
    bool ret = tinyWRAPPINVOKE.ProxyVideoConsumer_setAutoResizeDisplay(swigCPtr, bAutoResizeDisplay);
    return ret;
  }

  public bool getAutoResizeDisplay() {
    bool ret = tinyWRAPPINVOKE.ProxyVideoConsumer_getAutoResizeDisplay(swigCPtr);
    return ret;
  }

  public bool setConsumeBuffer(IntPtr pConsumeBufferPtr, uint nConsumeBufferSize) {
    bool ret = tinyWRAPPINVOKE.ProxyVideoConsumer_setConsumeBuffer(swigCPtr, pConsumeBufferPtr, nConsumeBufferSize);
    return ret;
  }

  public uint pull(IntPtr pOutput, uint nSize) {
    uint ret = tinyWRAPPINVOKE.ProxyVideoConsumer_pull(swigCPtr, pOutput, nSize);
    return ret;
  }

  public bool reset() {
    bool ret = tinyWRAPPINVOKE.ProxyVideoConsumer_reset(swigCPtr);
    return ret;
  }

  public virtual ulong getMediaSessionId() {
    ulong ret = tinyWRAPPINVOKE.ProxyVideoConsumer_getMediaSessionId(swigCPtr);
    return ret;
  }

  public static bool registerPlugin() {
    bool ret = tinyWRAPPINVOKE.ProxyVideoConsumer_registerPlugin();
    return ret;
  }

  public static void setDefaultChroma(tmedia_chroma_t eChroma) {
    tinyWRAPPINVOKE.ProxyVideoConsumer_setDefaultChroma((int)eChroma);
  }

  public static void setDefaultAutoResizeDisplay(bool bAutoResizeDisplay) {
    tinyWRAPPINVOKE.ProxyVideoConsumer_setDefaultAutoResizeDisplay(bAutoResizeDisplay);
  }

}

}
